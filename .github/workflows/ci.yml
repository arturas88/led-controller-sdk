name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.2', '8.3']
        include:
          - php-versions: '8.2'
            coverage: true

    name: PHP ${{ matrix.php-versions }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, mysql, gd
        coverage: ${{ matrix.coverage && 'xdebug' || 'none' }}

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-versions }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-versions }}-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run test suite
      run: composer run-script test

    - name: Run tests with coverage
      if: matrix.coverage
      run: composer run-script test:coverage

    - name: Upload coverage reports to Codecov
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/clover.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, mysql, gd
        tools: phpstan, php-cs-fixer

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.2-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.2-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run PHP CodeSniffer
      run: composer run-script cs:check

    - name: Run PHPStan
      run: composer run-script phpstan

    - name: Run PHP CS Fixer (dry-run)
      run: composer run-script cs:fix -- --dry-run --diff

  security:
    runs-on: ubuntu-latest
    name: Security Audit

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, mysql, gd

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.2-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.2-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run security audit
      run: composer audit

  build-examples:
    runs-on: ubuntu-latest
    name: Build Examples

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, mysql, gd

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.2-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.2-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Validate examples syntax
      run: |
        find examples -name "*.php" -exec php -l {} \;

    - name: Test examples autoloading
      run: |
        php -r "require_once 'vendor/autoload.php'; echo 'Autoloading works!\\n';" 