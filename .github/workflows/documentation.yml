name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'examples/**'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'examples/**'
      - '.github/workflows/documentation.yml'

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    name: Generate Documentation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, mysql, gd
        tools: composer

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.1-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.1-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install documentation dependencies
      run: |
        npm install -g @apidevtools/swagger-parser
        npm install -g redoc-cli

    - name: Generate API Documentation
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs/api
        
        # Generate class documentation
        php -r "
        require_once 'vendor/autoload.php';
        
        // Generate API documentation from source code
        \$classes = [];
        \$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator('src'));
        
        foreach (\$iterator as \$file) {
            if (\$file->isFile() && \$file->getExtension() === 'php') {
                \$content = file_get_contents(\$file->getPathname());
                if (preg_match('/class\s+(\w+)/', \$content, \$matches)) {
                    \$classes[] = \$matches[1];
                }
            }
        }
        
        // Generate markdown documentation
                  \$markdown = '# LED Controller SDK API Documentation\n\n';
        \$markdown .= 'Generated on: ' . date('Y-m-d H:i:s') . '\n\n';
        \$markdown .= '## Available Classes\n\n';
        
        foreach (\$classes as \$class) {
            \$markdown .= '- ' . \$class . '\n';
        }
        
        file_put_contents('docs/api/classes.md', \$markdown);
        echo 'API documentation generated successfully.';
        "

    - name: Generate Examples Documentation
      run: |
        # Generate examples documentation
        php -r "
        \$examples = glob('examples/*.php');
        \$markdown = '# Examples Documentation\n\n';
        \$markdown .= 'Generated on: ' . date('Y-m-d H:i:s') . '\n\n';
        
        foreach (\$examples as \$example) {
            \$filename = basename(\$example);
            \$content = file_get_contents(\$example);
            
            // Extract description from comment
            if (preg_match('/\/\*\*\s*\n\s*\*\s*(.+?)\s*\n/', \$content, \$matches)) {
                \$description = \$matches[1];
            } else {
                \$description = 'No description available';
            }
            
            \$markdown .= '## ' . \$filename . '\n\n';
            \$markdown .= \$description . '\n\n';
            \$markdown .= '```php\n';
            \$markdown .= \$content;
            \$markdown .= '\n```\n\n';
        }
        
        file_put_contents('docs/examples.md', \$markdown);
        echo 'Examples documentation generated successfully.';
        "

    - name: Generate Coverage Report
      run: |
        composer run-script test:coverage
        
        # Generate coverage badge
        php -r "
        \$coverage = 0;
        if (file_exists('coverage/clover.xml')) {
            \$xml = simplexml_load_file('coverage/clover.xml');
            \$metrics = \$xml->xpath('//metrics');
            if (\$metrics) {
                \$covered = (int)\$metrics[0]['coveredstatements'];
                \$total = (int)\$metrics[0]['statements'];
                \$coverage = \$total > 0 ? round((\$covered / \$total) * 100, 2) : 0;
            }
        }
        
        \$color = \$coverage >= 80 ? 'green' : (\$coverage >= 60 ? 'yellow' : 'red');
        \$badge = 'https://img.shields.io/badge/coverage-' . \$coverage . '%25-' . \$color;
        
        file_put_contents('docs/coverage-badge.md', '![Coverage](' . \$badge . ')');
        echo 'Coverage: ' . \$coverage . '%';
        "

    - name: Setup Python for mkdocs
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install mkdocs
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

    - name: Generate mkdocs configuration
      run: |
        cat > mkdocs.yml << EOF
        site_name: LED Controller SDK Documentation
        site_description: PHP SDK for LED Controller
        site_url: https://your-username.github.io/LEDController
        
        theme:
          name: material
          features:
            - navigation.tabs
            - navigation.sections
            - navigation.top
            - search.highlight
            - search.share
          palette:
            - scheme: default
              primary: blue
              accent: blue
              toggle:
                icon: material/weather-night
                name: Switch to dark mode
            - scheme: slate
              primary: blue
              accent: blue
              toggle:
                icon: material/weather-sunny
                name: Switch to light mode
        
        plugins:
          - search
          - mermaid2
        
        nav:
          - Home: index.md
          - API Reference: api/classes.md
          - Examples: examples.md
          - Basic Protocol: BasicProtocol.md
          - Communication Protocol: CommunicationProtocolForSetup.md
                      - SDK Documentation: LEDController_SDK.md
          - External Calls: ExternalCallsCommunicationProtocol.md
        
        markdown_extensions:
          - admonition
          - codehilite
          - pymdownx.superfences:
              custom_fences:
                - name: mermaid
                  class: mermaid
                  format: !!python/name:mermaid2.fence_mermaid
        EOF

    - name: Generate main documentation page
      run: |
        cat > docs/index.md << EOF
                  # LED Controller SDK Documentation
          
          Welcome to the LED Controller PHP SDK documentation!
          
          ## Overview
          
          The LED Controller SDK is a comprehensive PHP library for controlling LED displays. It provides a fluent, object-oriented interface for:
        
        - Network and Serial communication
        - Text and image display
        - Multi-window layouts
        - Animation effects
        - Configuration management
        - File operations
        - Scheduling
        
        ## Quick Start
        
        \`\`\`php
        <?php
        require_once 'vendor/autoload.php';
        
        use LEDController\LEDController;
        
        \$controller = new LEDController([
            'ip' => '192.168.1.222',
            'port' => 5200
        ]);
        
        \$controller->connect();
        \$controller->displayText('Hello, World!');
        \$controller->disconnect();
        \`\`\`
        
        ## Installation
        
        \`\`\`bash
                  composer require arturas88/led-controller-sdk
        \`\`\`
        
        ## Features
        
        - ✅ Network & Serial Communication
        - ✅ Text Display with Multiple Fonts
        - ✅ Image Display Support
        - ✅ Multi-Window Layouts
        - ✅ Animation Effects
        - ✅ Color Management
        - ✅ Configuration Management
        - ✅ File Operations
        - ✅ Scheduling Support
        - ✅ Comprehensive Testing
        
        ## Coverage
        
        $(cat docs/coverage-badge.md)
        
        ## Examples
        
        Check out our [Examples section](examples.md) for comprehensive usage examples.
        
        ## API Reference
        
        See the [API Reference](api/classes.md) for detailed class documentation.
        EOF

    - name: Build documentation site
      run: mkdocs build

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        enable_jekyll: false
        allow_empty_commit: false
        force_orphan: true
        publish_branch: gh-pages
        commit_message: 'docs: update documentation'

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          site/
          docs/
          coverage/
        retention-days: 30 